#include "ReleManager.h"
#include <RTClib.h> // –ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è DateTime now;
// No need to include "globals.h" here anymore, as pins are passed to the constructor.

// Constructor implementation
ReleManager::ReleManager()
    : _isBlinkingActive(false),
      _totalBlinksToPerform(0),
      _currentBlinkStep(0),
      _blinkStartMillis(0),
      _normalModeBlinkStart(0)
      {
    // Member initializer list is used to initialize private members.
    //_lastBlinkedMinute = -1; // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –æ–∫—Ä–µ–º–æ
}

// Initializes the LED indicators.
void ReleManager::init() {
    pinMode(ODD, OUTPUT);
    pinMode(EVEN, OUTPUT);
    digitalWrite(ODD, LOW);
    digitalWrite(EVEN, LOW);
}

// Starts the LED blinking process for offset feedback.
void ReleManager::blinkOffsetFeedback(int offset) {
    if (offset <= 0) {
        digitalWrite(ODD, LOW);
        digitalWrite(EVEN, LOW);
        _isBlinkingActive = false;
        return;
    }

    _totalBlinksToPerform = offset;
    _currentBlinkStep = 0;
    _isBlinkingActive = true;
    _blinkStartMillis = millis();
}

// Updates the LED blinking state (call this in loop()).
void ReleManager::update() {
    blinkOnEncoderUpdate();
}

//Blink after encoder state offset
void ReleManager::blinkOnEncoderUpdate(){
    unsigned long currentMillis = millis();

    if (!_isBlinkingActive) return;
    if (currentMillis - _blinkStartMillis < BLINK_PHASE_DURATION) return;

    _blinkStartMillis = currentMillis;
   
   // Even steps: LED is ON (either red or green)
  if (_currentBlinkStep % 2 == 0) {
        bool isOdd = ((_currentBlinkStep / 2) % 2 == 0); // Determine if it's a red or green phase

        if (isOdd) {
            digitalWrite(ODD, HIGH); // Red LED (assuming led1Pin is for red)
            digitalWrite(EVEN, LOW);
        } else {
            digitalWrite(ODD, LOW);
            digitalWrite(EVEN, HIGH); // Green LED (assuming led2Pin is for green)
        }
    }
    // Odd steps: Both LEDs are OFF (pause between blinks)
    else {
        digitalWrite(ODD, LOW);
        digitalWrite(EVEN, LOW);

        // Check if all blinks have been completed after the off phase
        if ((_currentBlinkStep + 1) / 2 >= _totalBlinksToPerform) {
            _isBlinkingActive = false;
            return;
        }
    }
  _currentBlinkStep++;
}

// –§—É–Ω–∫—Ü—ñ—è –±–ª–∏–º–∞–Ω–Ω—è –≤ –∑–≤–∏—á–∞–π–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ
void ReleManager::blinkOnNormalMode(DateTime currentDateTime) {
  unsigned long currentMillis = millis();

  // –û—Å–Ω–æ–≤–Ω–∞ —É–º–æ–≤–∞ –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–ª–∏–º–∞–Ω–Ω—è:
  // 1. currentDateTime.second() == 0: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø–æ—Ç–æ—á–Ω–∞ —Å–µ–∫—É–Ω–¥–∞ —Ä—ñ–≤–Ω–æ 00.
  // 2. (currentDateTime - lastBlinkedDateTime).totalseconds() >= 60L:
  //    –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∑ –º–æ–º–µ–Ω—Ç—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –±–ª–∏–º–∞–Ω–Ω—è –ø—Ä–æ–π—à–ª–æ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 60 —Å–µ–∫—É–Ω–¥.
  //    –¶–µ –∑–∞–ø–æ–±—ñ–≥–∞—î –±–∞–≥–∞—Ç–æ—Ä–∞–∑–æ–≤–æ–º—É —Å–ø—Ä–∞—Ü—å–æ–≤—É–≤–∞–Ω–Ω—é –ø—Ä–æ—Ç—è–≥–æ–º –æ–¥–Ω—ñ—î—ó —Ö–≤–∏–ª–∏–Ω–∏.
  if (currentDateTime.second() == 0 &&
      (currentDateTime - lastBlinkedDateTime).totalseconds() >= 60L) {

    // –Ø–∫—â–æ —É–º–æ–≤–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ, —Ü–µ 00 —Å–µ–∫—É–Ω–¥ –Ω–æ–≤–æ—ó —Ö–≤–∏–ª–∏–Ω–∏, –ø–æ—á–∏–Ω–∞—î–º–æ –±–ª–∏–º–∞–Ω–Ω—è.
    normalModeBlinkStart = currentMillis; // –ó–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ —á–∞—Å (millis()) –ø–æ—á–∞—Ç–∫—É –±–ª–∏–º–∞–Ω–Ω—è
    lastBlinkedDateTime = currentDateTime; // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤–Ω–∏–π DateTime –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —É—Å–ø—ñ—à–Ω–æ–≥–æ –±–ª–∏–º–∞–Ω–Ω—è

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫–∞ —Ö–≤–∏–ª–∏–Ω–∞ (–ø–∞—Ä–Ω–∞/–Ω–µ–ø–∞—Ä–Ω–∞)
    bool isOdd = !(currentDateTime.minute() % 2 == 0); // –ß–∏ —Ü–µ –Ω–µ–ø–∞—Ä–Ω–∞ —Ö–≤–∏–ª–∏–Ω–∞?
    ReleOnOff(isOdd); // –í–º–∏–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Å–≤—ñ—Ç–ª–æ–¥—ñ–æ–¥
    isBlinkingActive = true; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ, —â–æ –±–ª–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–µ
  }

  // –£–º–æ–≤–∞ –¥–ª—è –≤–∏–º–∫–Ω–µ–Ω–Ω—è LED:
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–∏–Ω—É–ª–æ BLINK_PHASE_DURATION (2 —Å–µ–∫—É–Ω–¥–∏) –∑ –º–æ–º–µ–Ω—Ç—É —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è
  // –Ü —á–∏ –±–ª–∏–º–∞–Ω–Ω—è –¥—ñ–π—Å–Ω–æ –±—É–ª–æ –∞–∫—Ç–∏–≤–Ω–∏–º
  if (isBlinkingActive && (currentMillis - normalModeBlinkStart >= BLINK_PHASE_DURATION)) {
    digitalWrite(ODD, LOW); // –í–∏–º–∏–∫–∞—î–º–æ –Ω–µ–ø–∞—Ä–Ω–∏–π —Å–≤—ñ—Ç–ª–æ–¥—ñ–æ–¥
    digitalWrite(EVEN, LOW); // –í–∏–º–∏–∫–∞—î–º–æ –ø–∞—Ä–Ω–∏–π —Å–≤—ñ—Ç–ª–æ–¥—ñ–æ–¥
    isBlinkingActive = false; // –°–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å, –æ—Å–∫—ñ–ª—å–∫–∏ –±–ª–∏–º–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ
  }
}

//–í–ª–∫\–í–∏–∫–ª —Ä–µ–ª–µ === —á–µ—Ç\–Ω–µ—á–µ—Ç
void ReleManager::ReleOnOff(bool isOdd){
    //–Ω–µ –ø–∞—Ä–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è(1..3..5..7)
    if (isOdd) {
 //     Serial.println("üî¥ (–ù–µ—á–µ—Ç–Ω—ã–π)");
      digitalWrite(EVEN, LOW);
      digitalWrite(ODD, HIGH);
    } else {
   //   Serial.println("üü¢ (–ß–µ—Ç–Ω—ã–π)");
      digitalWrite(ODD, LOW);
      digitalWrite(EVEN, HIGH);
    }
}

// Returns true if the LED blinking process is active.
bool ReleManager::isBusy() {
    return _isBlinkingActive;
}